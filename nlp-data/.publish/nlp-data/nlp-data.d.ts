// Generated by dts-bundle v0.3.0

declare module 'nlp-data' {
    import _Config from '__nlp-data/src/data/Config';
    import _Tweets from '__nlp-data/src/data/Tweets';
    import _ESClientFactory from '__nlp-data/src/util/ESClientFactory';
    namespace nlp_data {
        const Config: typeof _Config;
        const Tweets: typeof _Tweets;
        const ESClientFactory: typeof _ESClientFactory;
        namespace Models {
            interface IConfig extends _Config.IConfig {
            }
            interface ITweet extends _Tweets.ITweet {
            }
            interface IElasticSearchClientParam extends _ESClientFactory.IElasticSearchClientParam {
            }
        }
    }
    export default nlp_data;
}

declare module '__nlp-data/src/data/Config' {
    import ESClientFactory from "__nlp-data/src/util/ESClientFactory";
    export namespace Data {
        class Config {
            constructor(esParam: ESClientFactory.IElasticSearchClientParam, indexName?: string);
            Save(data: IConfig): Promise<ISaveResult>;
            Delete(key: string): Promise<IDeleteResult>;
            Get(key: string): Promise<IGetResult>;
            All(size?: number): Promise<IAllResult>;
        }
        interface IConfig {
            key: string;
            value: string;
        }
        interface ISaveResult {
            Param: IConfig;
            Error?: Error;
        }
        interface IDeleteResult {
            Param: {
                key: string;
            };
            Error?: Error;
        }
        interface IAllResult {
            Param: {
                size?: number;
            };
            Data?: Array<IConfig>;
            TotalCount?: number;
            Error?: Error;
        }
        interface IGetResult {
            Param: {
                key: string;
            };
            Data?: IConfig;
            Error?: Error;
        }
    }
    export default Data;
}

declare module '__nlp-data/src/data/Tweets' {
    import ESClientFactory from "__nlp-data/src/util/ESClientFactory";
    export namespace Data {
        class Tweets {
            constructor(esParam: ESClientFactory.IElasticSearchClientParam, indexName?: string);
            BulkSave(tweets: Array<ITweet>): Promise<IBulkSaveResult>;
            Count(text?: string): Promise<ICountResult>;
            InformationOfCreateAt(): Promise<IInfoOfCreateAtResult>;
            InformationOfId(): Promise<IInfoOfIdResult>;
            Search(text: string, size?: number): Promise<ISearchResult>;
        }
        interface ITweet {
            id: number;
            text: string;
            create_at: number;
            retweet_count: number;
            favorite_count: number;
            user_name: string;
            user_id: number;
            user_screen_name: string;
        }
        interface IBulkSaveResult {
            Param: Array<ITweet>;
            Error?: Error;
        }
        interface ISearchResult {
            Param: {
                text: string;
                size?: number;
            };
            Data?: Array<ITweet & {
                _score: number;
            }>;
            TotalCount?: number;
            Error?: Error;
        }
        interface ICountResult {
            Param: {
                text?: string;
            };
            Data?: number;
            Error?: Error;
        }
        interface IInfoOfCreateAtResult {
            Data?: {
                max_create_at: number;
                min_create_at: number;
            };
            Error?: Error;
        }
        interface IInfoOfIdResult {
            Data?: {
                max_id: number;
                min_id: number;
            };
            Error?: Error;
        }
    }
    export default Data;
}

declare module '__nlp-data/src/util/ESClientFactory' {
    export namespace ESClientFactory {
        interface IElasticSearchClientParam {
            Host: string;
            Port: number;
            Auth?: {
                name: string;
                password: string;
            };
        }
        function Create(param: IElasticSearchClientParam): any;
    }
    export default ESClientFactory;
}

